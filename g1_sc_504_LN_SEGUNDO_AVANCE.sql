CREATE TABLE FIDE_ASOCIADO_TB (
    ID_ASOCIADO NUMBER PRIMARY KEY,
    V_CEDULA VARCHAR2(20),
    V_NOMBRE VARCHAR2(100),
    V_APELLIDO VARCHAR2(100),
    V_CORREO VARCHAR2(100),
    V_FECHA DATE,
    V_TELEFONO VARCHAR2(20),
    ID_BENEFICIARIO NUMBER,
    ID_ESTADO_CIVIL NUMBER,
    ID_DIRECION NUMBER,
    ID_ESTADO NUMBER
);
ALTER TABLE FIDE_ASOCIADO_TB
ADD CONSTRAINT FIDE_ASOCIADO_FK_BENEFICIARIO FOREIGN KEY (ID_BENEFICIARIO) REFERENCES FIDE_BENEFICIARIOS_TB(ID_BENEFICIARIO);

ALTER TABLE FIDE_ASOCIADO_TB
ADD CONSTRAINT FIDE_ASOCIADO_FK_ESTADO_CIVIL FOREIGN KEY (ID_ESTADO_CIVIL) REFERENCES FIDE_ESTADO_CIVIL_TB(ID_ESTADO_CIVIL);

ALTER TABLE FIDE_ASOCIADO_TB
ADD CONSTRAINT FIDE_ASOCIADO_FK_DIRECCION FOREIGN KEY (ID_DIRECION) REFERENCES FIDE_DIRECCION_TB(ID_DIRECCION);

ALTER TABLE FIDE_ASOCIADO_TB
ADD CONSTRAINT FIDE_ASOCIADO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_BENEFICIARIOS_TB (
    ID_BENEFICIARIO NUMBER PRIMARY KEY,
    V_CEDULA VARCHAR2(20),
    V_NOMBRE VARCHAR2(100),
    V_APELLIDO VARCHAR2(100),
    V_CORREO VARCHAR2(100),
    V_FECHA DATE,
    V_TELEFONO VARCHAR2(20),
    ID_ASOCIADO NUMBER,
    ID_ESTADO_CIVIL NUMBER,
    ID_DIRECION NUMBER,
    ID_ESTADO NUMBER,
    ID_PARENTESCO NUMBER
);
ALTER TABLE FIDE_BENEFICIARIOS_TB
ADD CONSTRAINT FIDE_BENEFICIARIOS_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_BENEFICIARIOS_TB
ADD CONSTRAINT FIDE_BENEFICIARIOS_FK_ESTADO_CIVIL FOREIGN KEY (ID_ESTADO_CIVIL) REFERENCES FIDE_ESTADO_CIVIL_TB(ID_ESTADO_CIVIL);

ALTER TABLE FIDE_BENEFICIARIOS_TB
ADD CONSTRAINT FIDE_BENEFICIARIOS_FK_DIRECCION FOREIGN KEY (ID_DIRECION) REFERENCES FIDE_DIRECCION_TB(ID_DIRECCION);

ALTER TABLE FIDE_BENEFICIARIOS_TB
ADD CONSTRAINT FIDE_BENEFICIARIOS_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

ALTER TABLE FIDE_BENEFICIARIOS_TB
ADD CONSTRAINT FIDE_BENEFICIARIOS_FK_PARENTESCO FOREIGN KEY (ID_PARENTESCO) REFERENCES FIDE_PARENTESCO_TB(ID_PARENTESCO);


CREATE TABLE FIDE_ESTADO_TB (
    ID_ESTADO NUMBER PRIMARY KEY,
    V_ESTADO VARCHAR2(100)
);

CREATE TABLE FIDE_ESTADO_CIVIL_TB (
    ID_ESTADO_CIVIL NUMBER PRIMARY KEY,
    ID_ESTADO NUMBER
);
ALTER TABLE FIDE_ESTADO_CIVIL_TB
ADD CONSTRAINT FIDE_ESTADO_CIVIL_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_PARENTESCO_TB (
    ID_PARENTESCO NUMBER PRIMARY KEY,
    V_PARENTESCO VARCHAR2(50)
);

CREATE TABLE FIDE_PRODUCTO_TB (
    ID_PRODUCTO NUMBER PRIMARY KEY,
    ID_ESTADO NUMBER,
    V_NOMBRE VARCHAR2(100),
    V_MONTO NUMBER
);
ALTER TABLE FIDE_PRODUCTO_TB
ADD CONSTRAINT FIDE_PRODUCTO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_EXCEDENTES_TB (
    ID_ASOCIADO NUMBER,
    ID_PRODUCTO NUMBER,
    ID_ESTADO NUMBER,
    V_EXCEDENTE NUMBER
);
ALTER TABLE FIDE_EXCEDENTES_TB
ADD CONSTRAINT FIDE_EXCEDENTES_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_EXCEDENTES_TB
ADD CONSTRAINT FIDE_EXCEDENTES_FK_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES FIDE_PRODUCTO_TB(ID_PRODUCTO);

ALTER TABLE FIDE_EXCEDENTES_TB
ADD CONSTRAINT FIDE_EXCEDENTES_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);


CREATE TABLE FIDE_GESTION_FACTURA_TB (
    ID_GESTION_FACTURA NUMBER PRIMARY KEY,
    ID_GESTON_CREDITO NUMBER,
    ID_ASOCIADO NUMBER,
    ID_ESTADO NUMBER,
    V_PAGO NUMBER,
    V_FACTURA VARCHAR2(100)
);
ALTER TABLE FIDE_GESTION_FACTURA_TB
ADD CONSTRAINT FIDE_GESTION_FACTURA_FK_GESTION_CREDITO FOREIGN KEY (ID_GESTON_CREDITO) REFERENCES FIDE_GESTION_DE_CREDITO_TB(ID_GESTION_CREDITO);

ALTER TABLE FIDE_GESTION_FACTURA_TB
ADD CONSTRAINT FIDE_GESTION_FACTURA_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_GESTION_FACTURA_TB
ADD CONSTRAINT FIDE_GESTION_FACTURA_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);


CREATE TABLE FIDE_CARGOS_ADMINISTRATIVOS_TB (
    ID_CARGO_ADMINISTRATIVO NUMBER PRIMARY KEY,
    ID_ESTADO NUMBER,
    V_CARGO VARCHAR2(100)
);
ALTER TABLE FIDE_CARGOS_ADMINISTRATIVOS_TB
ADD CONSTRAINT FIDE_CARGOS_ADMINISTRATIVOS_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);


CREATE TABLE FIDE_DISTRITO_TB (
    ID_DISTRITO NUMBER PRIMARY KEY,
    ID_CANTON NUMBER,
    ID_ESTADO NUMBER,
    V_NOMBRE_DISTRITO VARCHAR2(100)
);
ALTER TABLE FIDE_DISTRITO_TB
ADD CONSTRAINT FIDE_DISTRITO_FK_CANTON FOREIGN KEY (ID_CANTON) REFERENCES FIDE_CANTON_TB(ID_CANTON);

ALTER TABLE FIDE_DISTRITO_TB
ADD CONSTRAINT FIDE_DISTRITO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_CANTON_TB (
    ID_CANTON NUMBER PRIMARY KEY,
    ID_PROVINCIA NUMBER,
    ID_ESTADO NUMBER,
    V_NOMBRE_CANTON VARCHAR2(100)
);
ALTER TABLE FIDE_CANTON_TB
ADD CONSTRAINT FIDE_CANTON_FK_PROVINCIA FOREIGN KEY (ID_PROVINCIA) REFERENCES FIDE_PROVINCIA_TB(ID_PROVINCIA);

ALTER TABLE FIDE_CANTON_TB
ADD CONSTRAINT FIDE_CANTON_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);


CREATE TABLE FIDE_PROVINCIA_TB (
    ID_PROVINCIA NUMBER PRIMARY KEY,
    ID_PAIS NUMBER,
    ID_ESTADO NUMBER,
    V_NOMBRE_PROVINCIA VARCHAR2(100)
);
ALTER TABLE FIDE_PROVINCIA_TB
ADD CONSTRAINT FIDE_PROVINCIA_FK_PAIS FOREIGN KEY (ID_PAIS) REFERENCES FIDE_PAIS_TB(ID_PAIS);

ALTER TABLE FIDE_PROVINCIA_TB
ADD CONSTRAINT FIDE_PROVINCIA_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);


CREATE TABLE FIDE_PAIS_TB (
    ID_PAIS NUMBER PRIMARY KEY,
    ID_ESTADO NUMBER,
    V_NOMBRE_PAIS VARCHAR2(100)
);
ALTER TABLE FIDE_PAIS_TB
ADD CONSTRAINT FIDE_PAIS_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_DIRECCION_TB (
    ID_DIRECCION NUMBER PRIMARY KEY,
    ID_DISTRITO NUMBER,
    ID_CANTON NUMBER,
    ID_PROVINCIA NUMBER,
    ID_ESTADO NUMBER,
    V_DESCRIPCION VARCHAR2(200)
);
ALTER TABLE FIDE_DIRECCION_TB
ADD CONSTRAINT FIDE_DIRECCION_FK_DISTRITO FOREIGN KEY (ID_DISTRITO) REFERENCES FIDE_DISTRITO_TB(ID_DISTRITO);

ALTER TABLE FIDE_DIRECCION_TB
ADD CONSTRAINT FIDE_DIRECCION_FK_CANTON FOREIGN KEY (ID_CANTON) REFERENCES FIDE_CANTON_TB(ID_CANTON);

ALTER TABLE FIDE_DIRECCION_TB
ADD CONSTRAINT FIDE_DIRECCION_FK_PROVINCIA FOREIGN KEY (ID_PROVINCIA) REFERENCES FIDE_PROVINCIA_TB(ID_PROVINCIA);

ALTER TABLE FIDE_DIRECCION_TB
ADD CONSTRAINT FIDE_DIRECCION_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_REBAJO_PLANILLA_TB (
    ID_PLANILLA NUMBER PRIMARY KEY,
    ID_GESTION_CREDITO NUMBER,
    ID_ASOCIADO NUMBER,
    ID_PRODUCTO NUMBER,
    ID_ESTADO NUMBER
);
ALTER TABLE FIDE_REBAJO_PLANILLA_TB
ADD CONSTRAINT FIDE_REBAJO_PLANILLA_FK_GESTION_CREDITO FOREIGN KEY (ID_GESTION_CREDITO) REFERENCES FIDE_GESTION_DE_CREDITO_TB(ID_GESTION_CREDITO);

ALTER TABLE FIDE_REBAJO_PLANILLA_TB
ADD CONSTRAINT FIDE_REBAJO_PLANILLA_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_REBAJO_PLANILLA_TB
ADD CONSTRAINT FIDE_REBAJO_PLANILLA_FK_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES FIDE_PRODUCTO_TB(ID_PRODUCTO);

ALTER TABLE FIDE_REBAJO_PLANILLA_TB
ADD CONSTRAINT FIDE_REBAJO_PLANILLA_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_GESTION_DE_CREDITO_TB (
    ID_GESTION_CREDITO NUMBER PRIMARY KEY,
    ID_ASOCIADO NUMBER,
    ID_GESTION_COBRO NUMBER,
    ID_PLAZO NUMBER,
    ID_LINEA_CREDITO NUMBER,
    ID_CARGO_ADMINISTRATIVO NUMBER,
    ID_ESTADO NUMBER,
    V_MONTO NUMBER,
    V_TASA NUMBER,
    V_CUOTA NUMBER,
    V_POLIZA VARCHAR2(100),
    V_TOTAL_MENSUAL NUMBER,
    V_REFINANCIAMIENTO NUMBER,
    V_ADELANTO_INTERESES NUMBER,
    V_DESEMBOLSO NUMBER,
    V_FECHA DATE
);
ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_GESTION_COBRO FOREIGN KEY (ID_GESTION_COBRO) REFERENCES FIDE_GESTION_DE_COBRO_TB(ID_GESTION_COBRO);

ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_PLAZO FOREIGN KEY (ID_PLAZO) REFERENCES FIDE_PLAZO_TB(ID_PLAZO);

ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_LINEA_CREDITO FOREIGN KEY (ID_LINEA_CREDITO) REFERENCES FIDE_LINEA_DE_CREDITO_TB(ID_LINEA_CREDITO);

ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_CARGO_ADMINISTRATIVO FOREIGN KEY (ID_CARGO_ADMINISTRATIVO) REFERENCES FIDE_CARGOS_ADMINISTRATIVOS_TB(ID_CARGO_ADMINISTRATIVO);

ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_LINEA_DE_CREDITO_TB (
    ID_LINEA_CREDITO NUMBER PRIMARY KEY,
    V_LINEA VARCHAR2(100),
    ID_ESTADO NUMBER
);

ALTER TABLE FIDE_LINEA_DE_CREDITO_TB
ADD CONSTRAINT FIDE_LINEA_DE_CREDITO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_PLAZO_TB (
    ID_PLAZO NUMBER PRIMARY KEY,
    V_PLAZO VARCHAR2(50),
    ID_ESTADO NUMBER
);
DROP TABLE FIDE_PLAZO_TB CASCADE CONSTRAINTS

ALTER TABLE FIDE_PLAZO_TB
ADD CONSTRAINT FIDE_PLAZO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_GESTION_DE_REPORTE_TB (
    ID_GESTION_REPORTE NUMBER PRIMARY KEY,
    ID_GESTION_CREDITO NUMBER,
    ID_GESTION_COBRO NUMBER,
    ID_PRODUCTO NUMBER,
    ID_PLANILLA NUMBER,
    ID_ASOCIADO NUMBER,
    ID_FACTURA NUMBER,
    ID_ESTADO NUMBER
);
ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_GESTION_CREDITO FOREIGN KEY (ID_GESTION_CREDITO) REFERENCES FIDE_GESTION_DE_CREDITO_TB(ID_GESTION_CREDITO);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_GESTION_COBRO FOREIGN KEY (ID_GESTION_COBRO) REFERENCES FIDE_GESTION_DE_COBRO_TB(ID_GESTION_COBRO);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES FIDE_PRODUCTO_TB(ID_PRODUCTO);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_PLANILLA FOREIGN KEY (ID_PLANILLA) REFERENCES FIDE_REBAJO_PLANILLA_TB(ID_PLANILLA);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_FACTURA FOREIGN KEY (ID_FACTURA) REFERENCES FIDE_GESTION_FACTURA_TB(ID_GESTION_FACTURA);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_GESTION_DE_COBRO_TB (
    ID_GESTION_COBRO NUMBER PRIMARY KEY,
    ID_GESTION_CREDITO NUMBER,
    ID_DIRECCION NUMBER,
    ID_PRODUCTO NUMBER,
    ID_ESTADO NUMBER,
    ID_ASOCIADO NUMBER
);

ALTER TABLE FIDE_GESTION_DE_COBRO_TB
ADD CONSTRAINT FIDE_GESTION_DE_COBRO_FK_GESTIOND_CREDITO FOREIGN KEY (ID_GESTION_CREDITO) REFERENCES FIDE_GESTION_DE_CREDITO_TB(ID_GESTION_CREDITO);

ALTER TABLE FIDE_GESTION_DE_COBRO_TB
ADD CONSTRAINT FIDE_GESTION_DE_COBRO_FK_DIRECCION FOREIGN KEY (ID_DIRECCION) REFERENCES FIDE_DIRECCION_TB(ID_DIRECCION);

ALTER TABLE FIDE_GESTION_DE_COBRO_TB
ADD CONSTRAINT FIDE_GESTION_DE_COBRO_FK_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES FIDE_PRODUCTO_TB(ID_PRODUCTO);

ALTER TABLE FIDE_GESTION_DE_COBRO_TB
ADD CONSTRAINT FIDE_GESTION_DE_COBRO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

ALTER TABLE FIDE_GESTION_DE_COBRO_TB
ADD CONSTRAINT FIDE_GESTION_DE_COBRO_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

/*CURSORES*/
CREATE OR REPLACE PROCEDURE GENERAR_REBAJO_PLANILLA AS
  CURSOR c_cedulas IS
    SELECT V_CEDULA FROM FIDE_ASOCIADO_TB;

  CURSOR c_creditos IS
    SELECT a.V_CEDULA, g.V_CUOTA
    FROM FIDE_ASOCIADO_TB a
    JOIN FIDE_GESTION_DE_CREDITO_TB g ON a.ID_ASOCIADO = g.ID_ASOCIADO
    WHERE g.V_CUOTA > 0;

  v_linea VARCHAR2(4000);
  v_output_file UTL_FILE.FILE_TYPE;
BEGIN
  v_output_file := UTL_FILE.FOPEN('DIRECTORY_PATH', 'rebajo_planilla.txt', 'w'); -- Ajusta el directorio

  FOR r IN c_cedulas LOOP
    v_linea := r.V_CEDULA || ', 800001, 1.0000, 0';
    UTL_FILE.PUT_LINE(v_output_file, v_linea);
  END LOOP;

  FOR r IN c_creditos LOOP
    v_linea := r.V_CEDULA || ', 800002, ' || r.V_CUOTA || ', 0';
    UTL_FILE.PUT_LINE(v_output_file, v_linea);
  END LOOP;

  FOR r IN c_cedulas LOOP
    v_linea := r.V_CEDULA || ', 800003, 1.500, 0';
    UTL_FILE.PUT_LINE(v_output_file, v_linea);
  END LOOP;
  UTL_FILE.FCLOSE(v_output_file);
  DBMS_OUTPUT.PUT_LINE('Archivo generado correctamente.');

EXCEPTION
  WHEN OTHERS THEN
    IF UTL_FILE.IS_OPEN(v_output_file) THEN
      UTL_FILE.FCLOSE(v_output_file);
    END IF;
    DBMS_OUTPUT.PUT_LINE('Error al generar el archivo: ' || SQLERRM);
END GENERAR_REBAJO_PLANILLA;



CREATE OR REPLACE PROCEDURE PROCESAR_REBAJO_DESDE_TXT (p_directory_name IN VARCHAR2, p_filename IN VARCHAR2) AS
  v_file UTL_FILE.FILE_TYPE;
  v_line VARCHAR2(4000);
  v_cedula VARCHAR2(20);
  v_codigo VARCHAR2(10);
  v_cuota NUMBER;

BEGIN
  v_file := UTL_FILE.FOPEN(p_directory_name, p_filename, 'R');

  LOOP
    BEGIN
      UTL_FILE.GET_LINE(v_file, v_line);

      -- Extraer datos separando por coma
      v_cedula := TRIM(REGEXP_SUBSTR(v_line, '[^,]+', 1, 1)); 
      v_codigo := TRIM(REGEXP_SUBSTR(v_line, '[^,]+', 1, 2)); 
      v_cuota  := TO_NUMBER(TRIM(REGEXP_SUBSTR(v_line, '[^,]+', 1, 3)));

      IF v_codigo = '800002' THEN
        UPDATE FIDE_GESTION_DE_CREDITO_TB
        SET V_CUOTA = V_CUOTA - v_cuota
        WHERE ID_ASOCIADO = (SELECT ID_ASOCIADO FROM FIDE_ASOCIADO_TB WHERE V_CEDULA = v_cedula);
        COMMIT;
      END IF;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró la cédula: ' || v_cedula);
      WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error en formato numérico en la línea: ' || v_line);
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error desconocido: ' || SQLERRM);
    END;
  END LOOP;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('El archivo está vacío o no se pudo leer.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error general: ' || SQLERRM);
    IF UTL_FILE.IS_OPEN(v_file) THEN
    UTL_FILE.FCLOSE(v_file);
  END IF;

END PROCESAR_REBAJO_DESDE_TXT;

--- LLAMR EL CODIGO
BEGIN
  PROCESAR_REBAJO_DESDE_TXT('DIRECTORY_PATH', 'rebajo_planilla.txt');
END;

CREATE OR REPLACE PROCEDURE AUMENTAR_REBAJO_ASOCIADO (p_cedula IN VARCHAR2) AS
  v_id_asociado NUMBER;
  v_id_estado NUMBER;
  v_cuota NUMBER;
  v_tasa_interes NUMBER;
  v_nueva_cuota NUMBER;
  v_nueva_tasa NUMBER;

BEGIN
  SELECT a.ID_ASOCIADO, a.ID_ESTADO, g.V_CUOTA, g.V_TASA
  INTO v_id_asociado, v_id_estado, v_cuota, v_tasa_interes
  FROM FIDE_ASOCIADO_TB a
  JOIN FIDE_GESTION_DE_CREDITO_TB g ON a.ID_ASOCIADO = g.ID_ASOCIADO
  WHERE a.V_CEDULA = p_cedula;

  IF v_id_estado = 2 THEN
    v_nueva_cuota := v_cuota * 1.02;        
    v_nueva_tasa := v_tasa * 1.02;   

    UPDATE FIDE_GESTION_DE_CREDITO_TB
    SET V_CUOTA = v_nueva_cuota,
        V_TASA = v_nueva_tasa
    WHERE ID_ASOCIADO = v_id_asociado;

    DBMS_OUTPUT.PUT_LINE('Se aplicó el aumento del 2% para el asociado con cédula: ' || p_cedula);
  ELSE
    DBMS_OUTPUT.PUT_LINE('El asociado con cédula ' || p_cedula || ' no está en estado de renuncia.');
  END IF;

  COMMIT;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No se encontró un asociado con la cédula: ' || p_cedula);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    ROLLBACK; 
END AUMENTAR_REBAJO_ASOCIADO;


CREATE OR REPLACE PROCEDURE PROCESAR_EXCEDENTES_CURSOR (p_directory VARCHAR2, p_filename VARCHAR2) AS
  
  v_file UTL_FILE.FILE_TYPE;
  v_linea VARCHAR2(4000);
  v_cedula_txt VARCHAR2(20);
  v_id_asociado NUMBER;
  v_nombre_completo VARCHAR2(255);
  v_existe NUMBER;
  v_monto NUMBER := 100; 
  CURSOR c_excedentes IS
    SELECT V_CEDULA FROM FIDE_ASOCIADO_TB; 

BEGIN
  v_file := UTL_FILE.FOPEN(p_directory, p_filename, 'r');
  LOOP
    BEGIN
      UTL_FILE.GET_LINE(v_file, v_linea);
      v_cedula_txt := TRIM(SUBSTR(v_linea, 1, INSTR(v_linea, ',') - 1));

      OPEN c_excedentes;
      LOOP
        FETCH c_excedentes INTO v_cedula_txt;
        EXIT WHEN c_excedentes%NOTFOUND;

        BEGIN
          SELECT ID_ASOCIADO, V_NOMBRE_COMPLETO 
          INTO v_id_asociado, v_nombre_completo
          FROM FIDE_ASOCIADO_TB
          WHERE V_CEDULA = v_cedula_txt
          FETCH FIRST 1 ROWS ONLY;

          SELECT COUNT(*) INTO v_existe 
          FROM FIDE_EXCEDENTES_TB 
          WHERE ID_ASOCIADO = v_id_asociado;

          IF v_existe = 0 THEN
            INSERT INTO FIDE_EXCEDENTES_TB (ID_ASOCIADO, V_CEDULA, V_NOMBRE_COMPLETO, V_EXCEDENTE)
            VALUES (v_id_asociado, v_cedula_txt, v_nombre_completo, v_monto * 1.005);

            DBMS_OUTPUT.PUT_LINE('Excedente agregado: ' || v_nombre_completo || 
                                 ' (Cédula: ' || v_cedula_txt || ')');

          ELSE
            DBMS_OUTPUT.PUT_LINE('Ya existe en excedentes: ' || v_nombre_completo || 
                                 ' (Cédula: ' || v_cedula_txt || ')');
          END IF;

        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Cédula no encontrada en FIDE_ASOCIADO_TB: ' || v_cedula_txt);
        END;

      END LOOP;
      CLOSE c_excedentes;

    EXCEPTION
      WHEN UTL_FILE.END_OF_FILE THEN
        EXIT;
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error en procesamiento: ' || SQLERRM);
    END;
  END LOOP;
  UTL_FILE.FCLOSE(v_file);
  COMMIT;

EXCEPTION
  WHEN UTL_FILE.INVALID_PATH THEN
    DBMS_OUTPUT.PUT_LINE('Error: Ruta del archivo no válida.');
  WHEN UTL_FILE.INVALID_OPERATION THEN
    DBMS_OUTPUT.PUT_LINE('Error: Operación de archivo no válida.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
    ROLLBACK;
END PROCESAR_EXCEDENTES_CURSOR;

/*FUNCIONES*/
CREATE OR REPLACE FUNCTION OBTENER_NOMBRE_ASOCIADO_FN( 

	va_ID_ASOCIADO IN NUMBER 

) RETURN VARCHAR2 IS  

	v_nombre FIDE_ASOCIADO_TB.NOMBRE%TYPE; 

BEGIN 

	SELECT NOMBRE 

	INTO v_nombre 

	FROM FIDE_ASOCIADO_TB 

	WHERE ID_ASOCIADO = va_ID_ASOCIADO; 

	RETURN v_nombre; 

EXCEPTION 

	WHEN NO_DATA_FOUND THEN RETURN NULL; 

END; 

 

CREATE OR REPLACE FUNCTION OBTENER_NOMBRE_ASOCIADO_FN( 

	va_ID_ASOCIADO IN NUMBER 

) RETURN VARCHAR2 IS  

	v_nombre FIDE_ASOCIADO_TB.NOMBRE%TYPE; 

	v_apellido FIDE_ASOCIADO_TBAPELLIDO%TYPE; 

	v_nombre_completo VARCHAR2 (200); 

BEGIN 

	SELECT NOMBRE, APELLIDO 

	INTO v_nombre, v_apellido 

	FROM FIDE_ASOCIADO_TB 

	WHERE ID_ASOCIADO = va_ID_ASOCIADO; 

	v_nombre_completo := v_nombre || ' ' ||v_apellido ; 

	RETURN v_nombre; 

EXCEPTION 

	WHEN NO_DATA_FOUND THEN RETURN NULL; 

END; 

 

 

CREATE OR REPLACE FUNCTION EXISTE_ASOCIADO( 

	va_ID_ASOCIADO IN NUMBER 

) RETURN BOOLEAN IS  

	v_count IN NUMBER; 

BEGIN 

	SELECT COUNT(*) 

	INTO v_count 

	FROM FIDE_ASOCIADO_TB 

	WHERE ID_ASOCIADO = va_ID_ASOCIADO; 

	IF v_count > 0 THEN  

		RETURN TRUE; 

	ELSE 

		RETURN FALSE; 

	END IF; 

END; 

 

 

 

CREATE OR REPLACE FUNCTION OBTENER_NOMBRE_BENEFICIARIO_FN(va_ID_BENEFICIARIO IN NUMBER) 

RETURN VARCHAR2 

IS 

v_nombre FIDE_BENEFICIARIOS_TB.NOMBRE%TYPE; 

BEGIN 

SELECT NOMBRE  

INTO v_nombre 

FROM FIDE_BENEFICIARIO_TB

WHERE BENEFICIARIO_ID = va_ID_BENEFICIARIO; 

RETURN v_nombre; 

EXCEPTION 

	WHEN NO_DATA_FOUND THEN RETURN NULL; 

END; 

 

 

 

 

 

 

CREATE OR REPLACE FUNCTION CONTAR_BENEFICIARIOS_ASOCIADOS (va_ID_ASOCIADO IN NUMBER) 

RETURN NUMBER 

IS  

	v_cantidad IN NUMBER; 

BEGIN  

	SELECT COUNT(*) 

INTO v_cantidad 

FROM FIDE_BENEFICIARIOS_TB 

WHERE ID_ASOCIADO = va_ID_ASOCIADO; 

RETURN v_cantidad; 

END; 

 

CREATE OR REPLACE FUNCTION OBTENER_NOMBRE_PRODUCTO_FN (va_ID_PRODUCTO IN NUMBER) 

RETURN VARCHAR2 

IS  

	v_nombre FIDE_PRODUCTO_TB.NOMBRE%TYPE; 

BEGIN  

	SELECT NOMBRE 

INTO v_nombre 

FROM FIDE_PRODUCTO_TB 

WHERE ID_PRODUCTO = va_ID_PRODUCTO; 

RETURN v_nombre; 

EXCEPTION 

	WHEN NO_DATA_FOUND THEN RETURN NULL; 

END; 

 

 

CREATE OR REPLACE FUNCTION OBTENER_TASA_INTERES_FORMATEADA_FN(va_ID_PRODUCTO IN NUMBER)  

RETURN VARCHAR2 

IS 

	v_tasa FIDE_PRODUCTO_TB.TASA_INTERES%TYPE; 

	v_texto VARCHAR2(20);

BEGIN 

	SELECT TASA_INTERES 

	INTO v_tasa 

FROM FIDE_PRODUCTO_TB 

WHERE ID_PRODUCTO = va_ID_PRODUCTO; 

v_texto := TO CHAR(v_tasa,  ‘FM990.00’ || ‘%’) 

RETRUN v_texto; 

EXCEPTION 

WHEN NO_DATA_FOUND THEN RETURN NULL; 

END;		 

 

CREATE OR REPLACE FUNCTION CALCULAR_TOTAL_CREDITOS_ASOCIADO_FN(va_ID_ASOCIADO IN NUMBER) 

RETURN NUMBER 

IS 

v_total NUMBER; 

BEGIN 

	SELECT NVL(SUM(MONTO), 0) 

	INTO v_total 

	FROM FIDE_GESTION_DE_CREDITO_TB 

	WHERE ID_ASOCIADO = va_ID_ASOCIADO; 

	RETURN v_total; 

END; 

 

 

CREATE OR REPLACE FUNCTION CONTAR_TOTAL_CREDITOS_ASOCIADO_FN(va_ID_ASOCIADO IN NUMBER) 

RETURN NUMBER 

IS 

v_cantidad NUMBER; 

BEGIN 

	SELECT COUNT(*) 

	INTO v_ cantidad 

	FROM FIDE_GESTION_DE_CREDITO_TB 

	WHERE ID_ASOCIADO = va_ID_ASOCIADO; 

	RETURN v_ cantidad; 

EXCEPTION 

WHEN NO_DATA_FOUND THEN RETURN NULL; 

END; 

 

 

CREATE OR REPLACE FUNCTION CALCULAR_ANUAL_CREDITO_FN(va_ID_CREDITO IN NUMBER) 

RETURN NUMBER 

IS 

v_monto FIDE_GESTION_DE_CREDITO_TB.MONTO%TYPE; 

v_tasa FIDE_PRODUCTO_TB.TASA%TYPE;; 

v_interes_anual NUMBER; 

BEGIN 

	SELECT c.MONTO, p.TASA_INTERES 

	INTO v_monto, v_tasa 

	FROM FIDE_GESTION_DE_CREDITO_TB c 

	JOIN FIDE_PRODUCTO_TB p ON c.ID_PRODUCTO = p.ID_PRODUCTO 

 	WHERE c.ID_CREDITO = va_ID_CREDITO; 

	v_interes_anual := v_monto * (v_tasa / 100); 

	RETURN v_interes_anual; 

EXCEPTION 

WHEN NO_DATA_FOUND THEN RETURN NULL; 

END; 

 

CREATE OR REPLACE FUNCTION OBTENER_MONTO_FACTURA_FN(va_ID_FACTURA IN NUMBER) 

RETURN NUMBER 

IS 

	v_monto FIDE_GESTION_FACTURA_TB.MONTO%TYPE; 

BEGIN 

	SELECT MONTO 

	INTO v_monto 

	FROM FIDE_GESTION_FACTURA_TB 

	WHERE ID_FACTURA = va_ID_FACTURA 

	RETURN v_monto; 

EXCEPTION 

	WHEN NO_DATA_FOUND THEN RETURN NULL; 

END; 

 

CREATE OR REPLACE FUNCTION CALCULAR_TOTAL_FACTURAS_ASOCIADO_FN(va_ID_ASOCIADO IN NUMBER) 

RETURN NUMBER 

IS 

	v_total NUMBER; 

BEGIN 

	SELECT NVL (SUM(MONTO), 0) 

	INTO v_total 

	FROM FIDE_GESTION_FACTURA_TB 

	WHERE ID_ASOCIADO = va_ID_ASOCIADO 

	RETURN v_total; 

END; 

 

CREATE OR REPLACE FUNCTION ES_FACTURA_PAGADA_FN(va_ID_FACTURA IN NUMBER) 

RETURN NUMBER 

IS 

	v_estado FIDE_GESTION_FACTURA_TB.ESTADO%TYPE; 

BEGIN 

	SELECT ESTADO 

	INTO v_estado 

	FROM FIDE_GESTION_FACTURA_TB 

	WHERE ID_FACTURA = va_ID_FACTURA; 

	IF UPPER(v_estado) = ‘PAGADA’ THEN 

		RETURN TRUE; 

	ELSE 

		RETURN FALSE; 

END IF; 

EXCEPTION 

	WHEN NO_DATA_FOUND THEN RETURN FALSE; 

END; 

 

CREATE OR REPLACE FUNCTION OBTENER_DIRECCION_FORMATEADA_FN(va.ID_DIRECCION IN NUMBER) 

RETURN NUMBER 

IS 

	v_distrito 

	v_canton 

	v_provinvia 

	v_direccion IN NUMBER; 

BEGIN 

	SELECT ID_DISTRITO, ID_CANTON, ID_PROVINCIA 

INTO v_distrito, v_canton, v_provincia 

FROM FIDE_DIRECCION_TB 

WHERE ID_DIRECCION = va_ID_DIRECCION; 

v_direccion := v_distrito || ‘  ‘ || v_canton || ‘  ‘ || v_provincia; 

EXCEPTION  

	WHEN NO_DATA_FOUND THEN  

	RETURN NULL; 

END; 

/*PROCEDIMIENTOS*/

CREATE OR REPLACE PROCEDURE INSERT_FIDE_ASOCIADO_SP ( 

va_ID_ASOCIADO IN NUMBER, 

va_ID_BENEFICIARIO IN NUMBER, 

va_ID_ESTADO_CIVIL IN NUMBER, 

va_ID_DIRECCION IN NUMBER, 

va_ID_ESTADO IN NUMBER, 

va_CEDULA IN VARCHAR2, 

va_NOMBRE IN VARCHAR2, 

va_APELLIDO IN VARCHAR2, 

va_CORREO IN VARCHAR2, 

va_FECHA IN DATE, 

va_TELEFONO IN VARCHAR2 

) AS  

BEGIN 

INSERT INTO FIDE_ASOCIADO_TB ( 

ID_ASOCIADO, ID_BENEFICIARIO, ID_ESSTADO_CIVIL, ID_DIRECCION, ID_ESTADO, 

CEDULA, NOMBRE, APELLIDO, CORREO, FECHA, TELEFONO 

) VALUES ( 

 va_ID_ASOCIADO, va_ID_BENEFICIARIO, va_ID_ESTADO_CIVIL, va_ID_DIRECCION, va_ID_ESTADO, va_CEDULA, va_NOMBRE, va_APELLIDO, va_CORREO, va_FECHA, va_TELEFONO 

); 

COMMIT; 

END; 

 

 

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_ASOCIADO_SP ( 

va_ID_ASOCIADO IN NUMBER, 

va_CEDULA IN VARCHAR2, 

va_NOMBRE IN VARCHAR2, 

va_APELLIDO IN VARCHAR2, 

va_CORREO IN VARCHAR2, 

va_TELEFONO IN VARCHAR2 

) AS  

BEGIN 

UPDATE FIDE_ASOCIADO_TB  

SET CEDULA = P_CEDULA,

        NOMBRE = P_NOMBRE, 										 

        APELLIDO = P_APELLIDO,  

        CORREO = P_CORREO, 								       

        TELEFONO = P_TELEFONO 

WHERE ID_ASOCIADO = P_ID_ASOCIADO; 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE DELETE_FIDE_ASOCIADO_SP ( 

va_ID_ASOCIADO IN NUMBER

) AS  

BEGIN 

DELETE FROM FIDE_ASOCIADO_TB WHERE ID_ASOCIADO = P_ID_ASOCIADO; 

COMMIT; 

END; 

 

 

 

 

CREATE OR REPLACE PROCEDURE GET_FIDE_ASOCIADO_SP ( 

va_ID_ASOCIADO IN NUMBER
) AS  

V_CEDULA FIDE_ASOCIADO_TB.CEDULA%TYPE; 

V_NOMBRE FIDE_ASOCIADO_TB.NOMBRE%TYPE; 

V_APELLIDO FIDE_ASOCIADO_TB.APELLIDO%TYPE; 

V_CORREO FIDE_ASOCIADO_TB.CORREOTYPE;	 

V_TELEFONO FIDE_ASOCIADO_TB.TELEFONO TYPE; 

BEGIN 

SELECT  CEDULA, NOMBRE, APELLIDO, CORREO, FECHA, TELEFONO 

INTO V_CEDULA, V_NOMBRE, V_APELLIDO, V_CORREO,  V_TELEFONO 

FROM FIDE_ASOCIADO_TB WHERE ID_ASOCIADO = P_ID_ASOCIADO; 

 

DBMS_OUTPUT.PUT_LINE(‘Cedula’ || V_CEDULA); 

DBMS_OUTPUT.PUT_LINE(‘Nombre’ || V_NOMBRE); 

DBMS_OUTPUT.PUT_LINE(‘Apellido’ || V_APELLIDO); 

DBMS_OUTPUT.PUT_LINE(‘Correo’ || V_CORREO); 

DBMS_OUTPUT.PUT_LINE(‘Telefono’ || V_TELEFONO); 

 

END; 

 

CREATE OR REPLACE PROCEDURE INSERT_FIDE_BENEFICIARIOS_SP ( 

va_ID_BENEFICIARIO IN NUMBER, 

va_ID_ASOCIADO IN NUMBER, 

va_ID_ESTADO_CIVIL IN NUMBER, 

va_ID_DIRECCION IN NUMBER, 

va_ID_ESTADO IN NUMBER, 

va_ID_PARENTESCO IN NUMBER, 

va_CEDULA IN VARCHAR2, 

va_NOMBRE IN VARCHAR2, 

va_APELLIDO IN VARCHAR2, 

va_CORREO IN VARCHAR2, 

va_FECHA IN DATE, 

va_TELEFONO IN VARCHAR2 

) AS  

BEGIN 

INSERT INTO FIDE_BENEFICIARIOS_TB ( 

ID_BENEFICIARIO, ID_ASOCIADO,  ID_ESSTADO_CIVIL, ID_DIRECCION, ID_ESTADO,  

ID_PARENTESCO, CEDULA, NOMBRE, APELLIDO, CORREO, FECHA, TELEFONO 

) VALUES ( 

va_ID_BENEFICIARIO, va_ID_ASOCIADO, va_ID_ESTADO_CIVIL, va_ID_DIRECCION, 	 va_ID_ESTADO, va_ID_PARENTESCO, va_CEDULA, va_NOMBRE, va_APELLIDO, va_CORREO, va_FECHA, va_TELEFONO 

); 

COMMIT; 

END; 

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_BENEFICIARIOS_SP ( 

va_ID_BENEFICIARIO IN NUMBER, 

va_CEDULA IN VARCHAR2, 

va_NOMBRE IN VARCHAR2, 

va_APELLIDO IN VARCHAR2, 

va_CORREO IN VARCHAR2, 

va_TELEFONO IN VARCHAR2 

) AS  

BEGIN 

UPDATE FIDE_BENEFICIARIOS_TB  

SET CEDULA = va_CEDULA, 

        NOMBRE = va_NOMBRE, 										 

        APELLIDO = va_APELLIDO,  

        CORREO = va_CORREO, 								       

        TELEFONO = va_TELEFONO 

WHERE ID_BENEFICIARIO = va_ID_BENEFICIARIO; 

 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE DELETE_FIDE_BENEFICIARIOS_SP ( 

va_ID_BENEFICIARIO IN NUMBER 

) AS  

BEGIN 

DELETE FROM FIDE_BENEFICIARIOS_TB WHERE ID_BENEFICIARIO = P_ID_BENEFICIARIO; 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE GET_FIDE_BENEFICIARIOS_SP ( 

va_ID_BENEFICIARIO IN NUMBER

) AS  

V_NOMBRE FIDE_BENEFICIARIO_TB.NOMBRE%TYPE; 

V_APELLIDO FIDE_BENEFICIARIO_TB.APELLIDO%TYPE; 

BEGIN 

SELECT  NOMBRE, APELLIDO 

INTO V_NOMBRE, V_APELLIDO 

FROM FIDE_BENEFICIARIO_TB WHERE ID_BENEFICIARIO = P_ID_BENEFICIARIO; 

 

DBMS_OUTPUT.PUT_LINE(‘Nombre’ || V_NOMBRE); 

DBMS_OUTPUT.PUT_LINE(‘Apellido’ || V_APELLIDO); 

 

END; 

 

CREATE OR REPLACE PROCEDURE INSERT_FIDE_CREDITO_SP ( 

va_ID_GESTION_CREDITO IN NUMBER, 

va_ID_ASOCIADO IN NUMBER, 

va_ID_GESTION_COBRO IN NUMBER, 

va_ID_PLAZO IN NUMBER, 

va_ID_LINEA_CREDITO IN NUMBER, 

va_ID_CARGO_ADMINISTRATIVO IN NUMBER, 

va_ID_ESTADO IN NUMBER, 

va_MONTO IN NUMBER, 

va_TASA IN NUMBER, 

va_CUOTA IN NUMBER, 

va_POLIZA IN VARCHAR2, 

va_TOTAL_MENSUAL IN NUMBER, 

va_REFINANCIAMIENTO IN NUMBER, 

va_ADELANTO_INTERESES IN NUMBER, 

va_DESEMBOLSO IN NUMBER, 

va_FECHA IN DATE 

) AS  

BEGIN 

INSERT INTO FIDE_ GESTION_DE_CREDITO_TB ( 

ID_GESTION_CREDITO, ID_ASOCIADO,  ID_GESTION_COBRO, ID_PLAZO, ID_LINEA_CREDITO, ID_CARGO_ADMINISTRATIVO, ID_ESTADO, MONTO, TASA, CUOTA, POLIZA, TOTAL_MENSUAL, REFINANCIAMIENTO, ADELANTO_INTERESES, DESEMBOLSO, FECHA 

) VALUES ( 

va_ID_GESTION_CREDITO, va_ID_ASOCIADO, va_ID_GESTION_COBRO, va_ID_PLAZO,  va_ID_LINEA_CREDITO, va_ID_CARGO_ADMINISTRATIVO, va.ID_ESTADO, va_MONTO, va_TASA, va_CUOTA, va_POLIZA, va.TOTAL_MENSUAL, va.REFINANCIANIENTO, va.ADELANTO_INTERESES, va.DESEMBOLSO, va_FECHA 

); 

COMMIT; 

END; 

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_CREDITO_SP ( 

va_ID_GESTION_CREDITO IN NUMBER, 

va_MONTO IN NUMBER, 

va_TASA IN NUMBER, 

va_CUOTA IN NUMBER, 

va_TOTAL_MENSUAL IN NUMBER, 

va_ID_ESTADO IN NUMBER 

) AS  

BEGIN 

UPDATE FIDE_GESTION_DE_CREDITO_TB  

SET MONTO = va_MONTO, 

        TASA = va_TASA, 										 

        APELLIDO = va_APELLIDO,  

        CUOTA = va_CUOTA, 								       

        TOTAL_MENSUAL = va_TOTAL_MENSUAL, 

        ID_ESTADO = va.ID_ESTADO 

WHERE ID_GESTION_CREDITO = va_ID_GESTION_CREDITO; 

 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE DELETE_FIDE_CREDITO_SP ( 

va_ID_GESTION_CREDITO IN NUMBER 

) AS  

BEGIN 

DELETE FROM FIDE_ GESTION_DE_CREDITO_TB WHERE ID_GESTION_CREDITO = P_ID_GESTION_CREDITO; 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE GET_FIDE_CREDITO_SP ( 

va_ID_GESTION_CREDITO IN NUMBER 

) AS  

V_MONTO FIDE_GESTION_DE_CREDITO_TB.MONTO%TYPE; 

V_TASA FIDE_GESTION_DE_CREDITO_TB.TASA%TYPE; 

V_CUOTA FIDE_GESTION_DE_CREDITO_TB.CUOTA%TYPE; 

V_TOTAL FIDE_GESTION_DE_CREDITO_TB.TOTAL_MENSUAL%TYPE; 

V_FECHA FIDE_GESTION_DE_CREDITO_TB.FECHATYPE; 

BEGIN 

SELECT  MONTO, TASA, CUOTA, TOTAL_MENSUAL, FECHA 

INTO V_MONTO, V_TASA, V_CUOTA, V_TOTAL_MENSUAL, V_FECHA 

FROM FIDE_GESTION_DE_CREDITO_TB WHERE ID_GESTION_CREDITO = P_ID_GESTION_CREDITO; 

 

DBMS_OUTPUT.PUT_LINE(‘Monto’ || V_MONTO); 

DBMS_OUTPUT.PUT_LINE(‘Tasa’ || V_TASA); 

DBMS_OUTPUT.PUT_LINE(‘Cuota’ || V_CUOTA); 

DBMS_OUTPUT.PUT_LINE(‘TotalMensual’ || V_TOTAL_MENSUAL); 

DBMS_OUTPUT.PUT_LINE(‘Fecha’ || V_FECHA); 

 

END; 

 

CREATE OR REPLACE PROCEDURE INSERT_FIDE_PRODUCTO_SP ( 

va_ID_PRODUCTO IN NUMBER, 

va_ID_ESTADO IN NUMBER, 

va_NOMBRE IN VARCHAR2, 

va_MONTO IN NUMBER 

) AS  

BEGIN 

INSERT INTO FIDE_PRODUCTO_TB ( 

ID_PRODUCTO, ID_ESTADO, NOMBRE, MONTO 

) VALUES ( 

 va_ID_PRODUCTO, va_ID_ESTADO,  va_NOMBRE, va_MONTO 

); 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_PRODUCTO_SP ( 

va_ID_PRODUCTO IN NUMBER, 

va_ID_ESTADO IN NUMBER, 

va_NOMBRE IN VARCHAR2, 

va_MONTO IN NUMBER 

) AS  

BEGIN 

UPDATE FIDE_ PRODUCTO_TB  

SET NOMBRE = va_NOMBRE, 										 

        MONTO= va_MONTO 

WHERE ID_PRODUCTO = va_ID_PRODUCTO; 

 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE DELETE_FIDE_PRODUCTO_SP ( 

va_ID_PRODUCTO IN NUMBER

) AS  

BEGIN 

DELETE FROM FIDE_ PRODUCTO_TB WHERE ID_PRODUCTO = P_ID_PRODUCTO; 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE GET_FIDE_PRODUCTO_SP ( 

va_ID_PRODUCTO IN NUMBER

) AS  

V_NOMBRE FIDE_PRODUCTO_TB.NOMBRE%TYPE; 

V_MONTO FIDE_PRODUCTO_TB.MONTO%TYPE; 

BEGIN 

SELECT  NOMBRE, MONTO 

INTO V_NOMBRE, V_MONTO 

FROM FIDE_PRODUCTO_TB WHERE ID_PRODUCTO = P_ID_PRODUCTO; 

 

DBMS_OUTPUT.PUT_LINE(‘Nombre’ || V_NOMBRE); 

DBMS_OUTPUT.PUT_LINE(‘Monto’ || V_MONTO); 

 

END; 

 

CREATE OR REPLACE PROCEDURE INSERT_FIDE_PRODUCTO_SP ( 

va_ID_PRODUCTO IN NUMBER, 

va_ID_ESTADO IN NUMBER, 

va_NOMBRE IN VARCHAR2, 

va_MONTO IN NUMBER 

) AS  

BEGIN 

INSERT INTO FIDE_PRODUCTO _TB ( 

ID_PRODUCTO, ID_ESTADO, NOMBRE, MONTO 

) VALUES ( 

 va_ID_PRODUCTO, va_ID_ESTADO,  va_NOMBRE, va_MONTO 

); 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_PRODUCTO_SP ( 

va_ID_PRODUCTO IN NUMBER, 

va_ID_ESTADO IN NUMBER, 

va_NOMBRE IN VARCHAR2, 

va_MONTO IN NUMBER 

) AS  

BEGIN 

UPDATE FIDE_PRODUCTO_TB  

SET NOMBRE = va_NOMBRE, 										 

        MONTO= va_MONTO 

WHERE ID_PRODUCTO = va_ID_PRODUCTO; 

 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE DELETE_FIDE_PRODUCTO_SP ( 

va_ID_PRODUCTO IN NUMBER
) AS  

BEGIN 

DELETE FROM FIDE_PRODUCTO_TB WHERE ID_PRODUCTO = P_ID_PRODUCTO; 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE GET_FIDE_PRODUCTO_SP ( 

va_ID_PRODUCTO IN NUMBER 

) AS  

V_NOMBRE FIDE_PRODUCTO_TB.NOMBRE%TYPE; 

V_MONTO FIDE_PRODUCTO_TB.MONTO%TYPE; 

BEGIN 

SELECT  NOMBRE, MONTO 

INTO V_NOMBRE, V_MONTO 

FROM FIDE_PRODUCTO_TB WHERE ID_PRODUCTO = P_ID_PRODUCTO; 

 

DBMS_OUTPUT.PUT_LINE(‘Nombre’ || V_NOMBRE); 

DBMS_OUTPUT.PUT_LINE(‘Monto’ || V_MONTO); 

 

END; 

 

CREATE OR REPLACE PROCEDURE INSERT_FIDE_FACTURA_SP ( 

va_ID_GESTION_FACTURA IN NUMBER, 

va_ID_GESTION_CREDITO IN NUMBER, 

va_ID_ASOCIADO IN NUMBER, 

va_ID_ESTADO IN NUMBER,

va_PAGO IN VARCHAR2, 

va_FACTURA IN NUMBER

) AS  

BEGIN 

INSERT INTO FIDE_GESTION_FACTURA _TB ( 

ID_GESTION_FACTURA, ID_GESTION_CREDITO, ID_ASOCIADO, PAGO, FACTURA 

) VALUES ( 

 va_ID_GESTION_FACTURA, va_ID_GESTION_CREDITO, va_ID_ASOCIADO, va_PAGO, va_FACTURA 

); 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_FACTURA_SP ( 

va_ID_GESTION_FACTURA IN NUMBER, 

va_ID_GESTION_CREDITO IN NUMBER, 

va_ID_ASOCIADO IN NUMBER, 

va_PAGO IN VARCHAR2, 

va_FACTURA IN VARCHAR2 

) AS  

BEGIN 

UPDATE FIDE_GESTION_FACTURA _TB  

SET PAGO = va_PAGO, 										 

        FACTURA = va_FACTURA 

WHERE ID_GESTION_FACTURA = va_ID_GESTION_FACTURA; 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE DELETE_FIDE_FACTURA_SP ( 

va_ID_GESTION_FACTURA IN NUMBER

) AS  

BEGIN 

DELETE FROM FIDE_GESTION_FACTURA _TB WHERE ID_GESTION_FACTURA = va_ID_GESTION_FACTURA; 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE GET_FIDE_FACTURA_SP ( 

va_ID_GESTION_FACTURA IN NUMBER

) AS  

V_FACTURA FIDE_GESTION_FACTURA_TB.FACTURA%TYPE; 

V_PAGO FIDE_GESTION_FACTURA_TB.PAGO%TYPE; 

BEGIN 

SELECT  FACTURA, PAGO 

INTO V_FACTURA, V_PAGO 

FROM FIDE_GESTION_FACTURA_TB WHERE ID_GESTION_FACTURA = P_ID_GESTION_FACTURA; 

 

DBMS_OUTPUT.PUT_LINE(‘Factura’ || V_FACTURA); 

DBMS_OUTPUT.PUT_LINE(‘Pago’ || V_PAGO); 

 

END; 

 

 

 

CREATE OR REPLACE PROCEDURE INSERT_FIDE_DIRECCION_SP ( 

va_ID_DIRECCION IN NUMBER, 

va_ID_DISTRITO IN NUMBER, 

va_ID_CANTON IN NUMBER,

va_ID_PROVINCIA IN NUMBER, 

va_ID_ESTADO IN NUMBER,

va_DESCRIPCION IN VARCHAR2

) AS  

BEGIN 

INSERT INTO FIDE_DIRECCION_TB ( 

ID_DIRECCION, ID_DISTRITO, ID_CANTON, ID_PROVINCIA, ID_ESTADO, DESCRIPCION 

) VALUES ( 

 va_ID_DIRECCION, va_ID_DISTRITO, va_ID_CANTON, va_ID_PROVINCIA, va_ID_ESTADO, va_DESCRIPCION 

); 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_DIRECCION_SP ( 

va_ID_DIRECCION IN NUMBER, 

              va_ID_DISTRITO IN NUMBER,  

va_ID_CANTON IN NUMBER,  

va_ID_PROVINCIA IN NUMBER,  

va_ID_ESTADO IN NUMBER,  

va_DESCRIPCION IN VARCHAR2 

) AS  

BEGIN 

UPDATE FIDE_DIRECCION_TB  

SET      ID_DIRECCION = va_ID_DIRECCION, 

              ID_DISTRITO = va_ID_DISTRITO,  

ID_CANTON = va_ID_CANTON,  

ID_PROVINCIA = va_ID_PROVINCIA,  

ID_ESTADO = va_ID_ESTADO,  

DESCRIPCION = va_DESCRIPCION 

WHERE ID_ID_DIRECCION = va_ID_DIRECCION; 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE DELETE_FIDE_DIRECCION_SP ( 

va_ID_DIRECCION IN NUMBER 

) AS  

BEGIN 

DELETE FROM FIDE_DIRECCION_TB WHERE ID_DIRECCION = va_ID_DIRECCION; 

COMMIT; 

END; 

 

CREATE OR REPLACE PROCEDURE GET_FIDE_DIRECCION_SP ( 

va_ID_DIRECCION IN NUMBER 

) AS  

V_DESCRIPCION FIDE_DIRECCION_TB.DESCRIPCION%TYPE; 

BEGIN 

SELECT  DESCRIPCION 

INTO V_DESCRIPCION 

FROM FIDE_DESCRIPCION_TB WHERE ID_DIRECCION = P_ID_DIRECCION; 

 

DBMS_OUTPUT.PUT_LINE(‘Direccion’ || V_DESCRIPCION); 

END; 

 

 

CREATE OR REPLACE PROCEDURE MARCAR_FACTURA_PAGADA_SP ( 

P_ID_GESTION_FACTURA IN NUMBER 

) AS 

BEGIN 

UPDATE FIDE_GESTION_FACTURA_TB  

SET ID_ESTADO = (SELECT ID_ESTADO FROM FIDE_ESTADO_TB WHERE ESTADO = ‘PAGADO’) 

WHERE ID_GESTION_FACTURA = P_ID_GESTION_FACTURA; 

COMMIT;

END;


/*
COMMIT; 
    INSERT_FIDE_ASOCIADO_SP();
END; 


BEGIN
    UPDATE_FIDE_ASOCIADO_SP();
END;

BEGIN
    DELETE_FIDE_ASOCIADO_SP();
END;

BEGIN
    GET_FIDE_ASOCIADO_SP();
END;

BEGIN
    INSERT_FIDE_BENEFICIARIOS_SP();
END;

BEGIN
    UPDATE_FIDE_BENEFICIARIOS_SP();
END;

BEGIN
    DELETE_FIDE_BENEFICIARIOS_SP();
END;

BEGIN
    GET_FIDE_BENEFICIARIOS_SP();
END;

BEGIN
    INSERT_FIDE_CREDITO_SP();
END;

BEGIN
    UPDATE_FIDE_CREDITO_SP();
END;

BEGIN
    DELETE_FIDE_CREDITO_SP();
END;

BEGIN
    GET_FIDE_CREDITO_SP();
END;

BEGIN
    INSERT_FIDE_PRODUCTO_SP();
END;

BEGIN
    UPDATE_FIDE_PRODUCTO_SP();
END;

BEGIN
    DELETE_FIDE_PRODUCTO_SP();
END;

BEGIN
    GET_FIDE_PRODUCTO_SP();
END;

BEGIN
    INSERT_FIDE_FACTURA_SP();
END;

BEGIN
    UPDATE_FIDE_FACTURA_SP();
END;

BEGIN
    DELETE_FIDE_FACTURA_SP();
END;

BEGIN
    GET_FIDE_FACTURA_SP();
END;

BEGIN
    INSERT_FIDE_DIRECCION_SP();
END;

BEGIN
    UPDATE_FIDE_DIRECCION_SP();
END;

BEGIN
    DELETE_FIDE_DIRECCION_SP();
END;

BEGIN
    GET_FIDE_DIRECCION_SP();
END;
    
BEGIN
    MARCAR_FACTURA_PAGADA_SP(); 
END;

*/

/*SECUENCIAS*/
CREATE SEQUENCE ID_ESTADO_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_ESTADO_CIVIL_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_PARENTESCO_SEQ START WITH 1 INCREMENT BY 1; 

CREATE SEQUENCE ID_PRODUCTO_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_PROVINCIA_SEQ START WITH 1 INCREMENT BY 1; 

CREATE SEQUENCE ID_CANTON_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_DISTRITO_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_PAIS_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_GESTION_FACTURA_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_CARGO_ADMINISTRATIVO_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_DIRECCION_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_PLANILLA_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_GESTION_CREDITO_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_LINEA_CREDITO_SEQ START WITH 1 INCREMENT BY 1;  

CREATE SEQUENCE ID_PLAZO_SEQ START WITH 1 INCREMENT BY 1;                                                                                      

CREATE SEQUENCE ID_GESTION_REPORTE_SEQ START WITH 1 INCREMENT BY 1; 

 

 

DROP SEQUENCE ID_ESTADO_SEQ;  

DROP SEQUENCE ID_ESTADO_CIVIL_SEQ;  

DROP SEQUENCE ID_PARENTESCO_SEQ; 

DROP SEQUENCE ID_PRODUCTO_SEQ;  

DROP SEQUENCE ID_PROVINCIA_SEQ; 

DROP SEQUENCE ID_CANTON_SEQ;  

DROP SEQUENCE ID_DISTRITO_SEQ;  

DROP SEQUENCE ID_PAIS_SEQ;  

DROP SEQUENCE ID_GESTION_FACTURA_SEQ;  

DROP SEQUENCE ID_CARGO_ADMINISTRATIVO_SEQ;  

DROP SEQUENCE ID_DIRECCION_SEQ;  

DROP SEQUENCE ID_PLANILLA_SEQ;  

DROP SEQUENCE ID_GESTION_CREDITO_SEQ;  

DROP SEQUENCE ID_LINEA_CREDITO_SEQ;  

DROP SEQUENCE ID_PLAZO_SEQ;                                                                                      

DROP SEQUENCE ID_GESTION_REPORTE_SEQ; 

DROP SEQUENCE ID_GESTION_REPORTE_SEQ; 
/*VISTAS*/
CREATE TABLE FIDE_ASOCIADO_TB (
    ID_ASOCIADO NUMBER PRIMARY KEY,
    V_CEDULA VARCHAR2(20),
    V_NOMBRE VARCHAR2(100),
    V_APELLIDO VARCHAR2(100),
    V_CORREO VARCHAR2(100),
    V_FECHA DATE,
    V_TELEFONO VARCHAR2(20),
    ID_BENEFICIARIO NUMBER,
    ID_ESTADO_CIVIL NUMBER,
    ID_DIRECION NUMBER,
    ID_ESTADO NUMBER
);
ALTER TABLE FIDE_ASOCIADO_TB
ADD CONSTRAINT FIDE_ASOCIADO_FK_BENEFICIARIO FOREIGN KEY (ID_BENEFICIARIO) REFERENCES FIDE_BENEFICIARIOS_TB(ID_BENEFICIARIO);

ALTER TABLE FIDE_ASOCIADO_TB
ADD CONSTRAINT FIDE_ASOCIADO_FK_ESTADO_CIVIL FOREIGN KEY (ID_ESTADO_CIVIL) REFERENCES FIDE_ESTADO_CIVIL_TB(ID_ESTADO_CIVIL);

ALTER TABLE FIDE_ASOCIADO_TB
ADD CONSTRAINT FIDE_ASOCIADO_FK_DIRECCION FOREIGN KEY (ID_DIRECION) REFERENCES FIDE_DIRECCION_TB(ID_DIRECCION);

ALTER TABLE FIDE_ASOCIADO_TB
ADD CONSTRAINT FIDE_ASOCIADO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_BENEFICIARIOS_TB (
    ID_BENEFICIARIO NUMBER PRIMARY KEY,
    V_CEDULA VARCHAR2(20),
    V_NOMBRE VARCHAR2(100),
    V_APELLIDO VARCHAR2(100),
    V_CORREO VARCHAR2(100),
    V_FECHA DATE,
    V_TELEFONO VARCHAR2(20),
    ID_ASOCIADO NUMBER,
    ID_ESTADO_CIVIL NUMBER,
    ID_DIRECION NUMBER,
    ID_ESTADO NUMBER,
    ID_PARENTESCO NUMBER
);
ALTER TABLE FIDE_BENEFICIARIOS_TB
ADD CONSTRAINT FIDE_BENEFICIARIOS_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_BENEFICIARIOS_TB
ADD CONSTRAINT FIDE_BENEFICIARIOS_FK_ESTADO_CIVIL FOREIGN KEY (ID_ESTADO_CIVIL) REFERENCES FIDE_ESTADO_CIVIL_TB(ID_ESTADO_CIVIL);

ALTER TABLE FIDE_BENEFICIARIOS_TB
ADD CONSTRAINT FIDE_BENEFICIARIOS_FK_DIRECCION FOREIGN KEY (ID_DIRECION) REFERENCES FIDE_DIRECCION_TB(ID_DIRECCION);

ALTER TABLE FIDE_BENEFICIARIOS_TB
ADD CONSTRAINT FIDE_BENEFICIARIOS_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

ALTER TABLE FIDE_BENEFICIARIOS_TB
ADD CONSTRAINT FIDE_BENEFICIARIOS_FK_PARENTESCO FOREIGN KEY (ID_PARENTESCO) REFERENCES FIDE_PARENTESCO_TB(ID_PARENTESCO);


CREATE TABLE FIDE_ESTADO_TB (
    ID_ESTADO NUMBER PRIMARY KEY,
    V_ESTADO VARCHAR2(100)
);

CREATE TABLE FIDE_ESTADO_CIVIL_TB (
    ID_ESTADO_CIVIL NUMBER PRIMARY KEY,
    ID_ESTADO NUMBER
);
ALTER TABLE FIDE_ESTADO_CIVIL_TB
ADD CONSTRAINT FIDE_ESTADO_CIVIL_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_PARENTESCO_TB (
    ID_PARENTESCO NUMBER PRIMARY KEY,
    V_PARENTESCO VARCHAR2(50)
);

CREATE TABLE FIDE_PRODUCTO_TB (
    ID_PRODUCTO NUMBER PRIMARY KEY,
    ID_ESTADO NUMBER,
    V_NOMBRE VARCHAR2(100),
    V_MONTO NUMBER
);
ALTER TABLE FIDE_PRODUCTO_TB
ADD CONSTRAINT FIDE_PRODUCTO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_EXCEDENTES_TB (
    ID_ASOCIADO NUMBER,
    ID_PRODUCTO NUMBER,
    ID_ESTADO NUMBER,
    V_EXCEDENTE NUMBER
);
ALTER TABLE FIDE_EXCEDENTES_TB
ADD CONSTRAINT FIDE_EXCEDENTES_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_EXCEDENTES_TB
ADD CONSTRAINT FIDE_EXCEDENTES_FK_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES FIDE_PRODUCTO_TB(ID_PRODUCTO);

ALTER TABLE FIDE_EXCEDENTES_TB
ADD CONSTRAINT FIDE_EXCEDENTES_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);


CREATE TABLE FIDE_GESTION_FACTURA_TB (
    ID_GESTION_FACTURA NUMBER PRIMARY KEY,
    ID_GESTON_CREDITO NUMBER,
    ID_ASOCIADO NUMBER,
    ID_ESTADO NUMBER,
    V_PAGO NUMBER,
    V_FACTURA VARCHAR2(100)
);
ALTER TABLE FIDE_GESTION_FACTURA_TB
ADD CONSTRAINT FIDE_GESTION_FACTURA_FK_GESTION_CREDITO FOREIGN KEY (ID_GESTON_CREDITO) REFERENCES FIDE_GESTION_DE_CREDITO_TB(ID_GESTION_CREDITO);

ALTER TABLE FIDE_GESTION_FACTURA_TB
ADD CONSTRAINT FIDE_GESTION_FACTURA_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_GESTION_FACTURA_TB
ADD CONSTRAINT FIDE_GESTION_FACTURA_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);


CREATE TABLE FIDE_CARGOS_ADMINISTRATIVOS_TB (
    ID_CARGO_ADMINISTRATIVO NUMBER PRIMARY KEY,
    ID_ESTADO NUMBER,
    V_CARGO VARCHAR2(100)
);
ALTER TABLE FIDE_CARGOS_ADMINISTRATIVOS_TB
ADD CONSTRAINT FIDE_CARGOS_ADMINISTRATIVOS_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);


CREATE TABLE FIDE_DISTRITO_TB (
    ID_DISTRITO NUMBER PRIMARY KEY,
    ID_CANTON NUMBER,
    ID_ESTADO NUMBER,
    V_NOMBRE_DISTRITO VARCHAR2(100)
);
ALTER TABLE FIDE_DISTRITO_TB
ADD CONSTRAINT FIDE_DISTRITO_FK_CANTON FOREIGN KEY (ID_CANTON) REFERENCES FIDE_CANTON_TB(ID_CANTON);

ALTER TABLE FIDE_DISTRITO_TB
ADD CONSTRAINT FIDE_DISTRITO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_CANTON_TB (
    ID_CANTON NUMBER PRIMARY KEY,
    ID_PROVINCIA NUMBER,
    ID_ESTADO NUMBER,
    V_NOMBRE_CANTON VARCHAR2(100)
);
ALTER TABLE FIDE_CANTON_TB
ADD CONSTRAINT FIDE_CANTON_FK_PROVINCIA FOREIGN KEY (ID_PROVINCIA) REFERENCES FIDE_PROVINCIA_TB(ID_PROVINCIA);

ALTER TABLE FIDE_CANTON_TB
ADD CONSTRAINT FIDE_CANTON_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);


CREATE TABLE FIDE_PROVINCIA_TB (
    ID_PROVINCIA NUMBER PRIMARY KEY,
    ID_PAIS NUMBER,
    ID_ESTADO NUMBER,
    V_NOMBRE_PROVINCIA VARCHAR2(100)
);
ALTER TABLE FIDE_PROVINCIA_TB
ADD CONSTRAINT FIDE_PROVINCIA_FK_PAIS FOREIGN KEY (ID_PAIS) REFERENCES FIDE_PAIS_TB(ID_PAIS);

ALTER TABLE FIDE_PROVINCIA_TB
ADD CONSTRAINT FIDE_PROVINCIA_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);


CREATE TABLE FIDE_PAIS_TB (
    ID_PAIS NUMBER PRIMARY KEY,
    ID_ESTADO NUMBER,
    V_NOMBRE_PAIS VARCHAR2(100)
);
ALTER TABLE FIDE_PAIS_TB
ADD CONSTRAINT FIDE_PAIS_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_DIRECCION_TB (
    ID_DIRECCION NUMBER PRIMARY KEY,
    ID_DISTRITO NUMBER,
    ID_CANTON NUMBER,
    ID_PROVINCIA NUMBER,
    ID_ESTADO NUMBER,
    V_DESCRIPCION VARCHAR2(200)
);
ALTER TABLE FIDE_DIRECCION_TB
ADD CONSTRAINT FIDE_DIRECCION_FK_DISTRITO FOREIGN KEY (ID_DISTRITO) REFERENCES FIDE_DISTRITO_TB(ID_DISTRITO);

ALTER TABLE FIDE_DIRECCION_TB
ADD CONSTRAINT FIDE_DIRECCION_FK_CANTON FOREIGN KEY (ID_CANTON) REFERENCES FIDE_CANTON_TB(ID_CANTON);

ALTER TABLE FIDE_DIRECCION_TB
ADD CONSTRAINT FIDE_DIRECCION_FK_PROVINCIA FOREIGN KEY (ID_PROVINCIA) REFERENCES FIDE_PROVINCIA_TB(ID_PROVINCIA);

ALTER TABLE FIDE_DIRECCION_TB
ADD CONSTRAINT FIDE_DIRECCION_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_REBAJO_PLANILLA_TB (
    ID_PLANILLA NUMBER PRIMARY KEY,
    ID_GESTION_CREDITO NUMBER,
    ID_ASOCIADO NUMBER,
    ID_PRODUCTO NUMBER,
    ID_ESTADO NUMBER
);
ALTER TABLE FIDE_REBAJO_PLANILLA_TB
ADD CONSTRAINT FIDE_REBAJO_PLANILLA_FK_GESTION_CREDITO FOREIGN KEY (ID_GESTION_CREDITO) REFERENCES FIDE_GESTION_DE_CREDITO_TB(ID_GESTION_CREDITO);

ALTER TABLE FIDE_REBAJO_PLANILLA_TB
ADD CONSTRAINT FIDE_REBAJO_PLANILLA_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_REBAJO_PLANILLA_TB
ADD CONSTRAINT FIDE_REBAJO_PLANILLA_FK_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES FIDE_PRODUCTO_TB(ID_PRODUCTO);

ALTER TABLE FIDE_REBAJO_PLANILLA_TB
ADD CONSTRAINT FIDE_REBAJO_PLANILLA_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_GESTION_DE_CREDITO_TB (
    ID_GESTION_CREDITO NUMBER PRIMARY KEY,
    ID_ASOCIADO NUMBER,
    ID_GESTION_COBRO NUMBER,
    ID_PLAZO NUMBER,
    ID_LINEA_CREDITO NUMBER,
    ID_CARGO_ADMINISTRATIVO NUMBER,
    ID_ESTADO NUMBER,
    V_MONTO NUMBER,
    V_TASA NUMBER,
    V_CUOTA NUMBER,
    V_POLIZA VARCHAR2(100),
    V_TOTAL_MENSUAL NUMBER,
    V_REFINANCIAMIENTO NUMBER,
    V_ADELANTO_INTERESES NUMBER,
    V_DESEMBOLSO NUMBER,
    V_FECHA DATE
);
ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_GESTION_COBRO FOREIGN KEY (ID_GESTION_COBRO) REFERENCES FIDE_GESTION_DE_COBRO_TB(ID_GESTION_COBRO);

ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_PLAZO FOREIGN KEY (ID_PLAZO) REFERENCES FIDE_PLAZO_TB(ID_PLAZO);

ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_LINEA_CREDITO FOREIGN KEY (ID_LINEA_CREDITO) REFERENCES FIDE_LINEA_DE_CREDITO_TB(ID_LINEA_CREDITO);

ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_CARGO_ADMINISTRATIVO FOREIGN KEY (ID_CARGO_ADMINISTRATIVO) REFERENCES FIDE_CARGOS_ADMINISTRATIVOS_TB(ID_CARGO_ADMINISTRATIVO);

ALTER TABLE FIDE_GESTION_DE_CREDITO_TB
ADD CONSTRAINT FIDE_GESTION_DE_CREDITO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_LINEA_DE_CREDITO_TB (
    ID_LINEA_CREDITO NUMBER PRIMARY KEY,
    V_LINEA VARCHAR2(100)
);
ALTER TABLE FIDE_LINEA_DE_CREDITO_TB
ADD CONSTRAINT FIDE_LINEA_DE_CREDITO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_PLAZO_TB (
    ID_PLAZO NUMBER PRIMARY KEY,
    V_PLAZO VARCHAR2(50)
);
ALTER TABLE FIDE_PLAZO_TB
ADD CONSTRAINT FIDE_PLAZO_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO);

CREATE TABLE FIDE_GESTION_DE_REPORTE_TB (
    ID_GESTION_REPORTE NUMBER PRIMARY KEY,
    ID_GESTION_CREDITO NUMBER,
    ID_GESTION_COBRO NUMBER,
    ID_PRODUCTO NUMBER,
    ID_PLANILLA NUMBER,
    ID_ASOCIADO NUMBER,
    ID_FACTURA NUMBER,
    ID_ESTADO NUMBER
);
ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_GESTION_CREDITO FOREIGN KEY (ID_GESTION_CREDITO) REFERENCES FIDE_GESTION_DE_CREDITO_TB(ID_GESTION_CREDITO);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_GESTION_COBRO FOREIGN KEY (ID_GESTION_COBRO) REFERENCES FIDE_GESTION_DE_COBRO_TB(ID_GESTION_COBRO);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES FIDE_PRODUCTO_TB(ID_PRODUCTO);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_PLANILLA FOREIGN KEY (ID_PLANILLA) REFERENCES FIDE_REBAJO_PLANILLA_TB(ID_PLANILLA);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_ASOCIADO FOREIGN KEY (ID_ASOCIADO) REFERENCES FIDE_ASOCIADO_TB(ID_ASOCIADO);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_FACTURA FOREIGN KEY (ID_FACTURA) REFERENCES FIDE_GESTION_FACTURA_TB(ID_GESTION_FACTURA);

ALTER TABLE FIDE_GESTION_DE_REPORTE_TB
ADD CONSTRAINT FIDE_GESTION_DE_REPORTE_FK_ESTADO FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO)




CREATE OR REPLACE FIDE_ASOCIADOS_V AS 

SELECT 

A.ID_ASOCIADO,  

A.CEDULA, 

A.NOMBRE, 

A.APELLIDO, 

A.CORREO, 

A.FECHA, 

A.TELEFONO, 

EC.ID_ESTADO_CIVIL, 

EC.ID_ESTADO AS ESTADO_CIVIL, 

D.ID_DIRECCION, 

D.DESCRIPCION AS DIRECCION, 

E.ESTADO AS ESTADO 

FROM FIDE_ASOCIADO_TB A 

JOIN FIDE_ESTADO_CIVIL_TB EC ON A.ID_ESTADO_CIVIL = EC.ID_ESTADO_CIVIL 

JOIN FIDE_DIRECCION_TB D ON A.ID_DIRECCION = D.ID_ DIRECCION 

JOIN FIDE_ESTADO_TB E ON A.ID_ESTADO = E.ID_ESTADO; 

 

CREATE OR REPLACE FIDE_BENEFICIARIOS_V AS 

SELECT 

B.ID_ASOCIADO,  

B.CEDULA, 

B.NOMBRE, 

B.APELLIDO, 

B.CORREO, 

B.FECHA, 

B.TELEFONO, 

A.NOMBRE AS ASOCIADO, 

EC.ID_ESTADO_CIVIL, 

EC.ID_ESTADO AS ESTADO_CIVIL, 

D.ID_DIRECCION, 

D.DESCRIPCION AS DIRECCION, 

P.PARENTESCO, 

E.ESTADO AS ESTADO 

FROM FIDE_BENEFICIARIOS_TB B 

JOIN FIDE_ESTADO_CIVIL_TB EC ON B.ID_ESTADO_CIVIL = EC.ID_ESTADO_CIVIL 

JOIN FIDE_DIRECCION_TB D ON B.ID_DIRECCION = D.ID_ DIRECCION 

JOIN FIDE_ESTADO_TB E ON B.ID_ESTADO = E.ID_ESTADO; 

JOIN FIDE_ASOCIADO_TB A ON B.ID_ASOCIADO = A.ID_ASOCIADO; 

JOIN FIDE_ PARENTESCO _TB P ON B.ID_PARENTESCO = P.ID_ PARENTESCO; 

 

 

CREATE OR REPLACE FIDE_PRODUCTOS_V AS 

SELECT 

P.ID_PRODUCTO,  

P.NOMBRE, 

P.NOMBRE, 

E.ESTADO AS ESTADO 

FROM FIDE_PRODUCTO_TB P 

JOIN FIDE_ESTADO_TB E ON P.ID_ESTADO = E.ID_ESTADO; 

 

CREATE OR REPLACE VIEW FIDE_CREDITOS_V AS 

SELECT 

C.ID_GESTION_CREDITO, 

A.NOMBRE AS ASOCIADO, 

LC.LINEA AS LINEA_CREDITO, 

P.PLAZO, 

C.MONTO, 

C.TASA, 

C.CUOTA, 

C.TOTAL_MENSUAL, 

C.FECHA, 

E.ESTADO AS ESTADO 

FROM FIDE_GESTION_DE_CREDITO_TB C 

JOIN FIDE_ASOCIADO_TB A ON C.ID_ASOCIADO = A.ID_ASOCIADO, 

JOIN FIDE_LINEA _ DE _ CREDITO_TB LC ON C.ID_LINEA_CREDITO = LC.ID_LINEA_CREDITO, 

JOIN FIDE_PLAZO_TB P ON C.ID_PLAZO = P. ID_PLAZO, 

JOIN FIDE_ESTADO_TB E ON C.ID_ESTADO = E.ID_ESTADO; 

 

 

CREATE OR REPLACE VIEW FIDE_FACTURAS_V AS 

SELECT 

F.ID_GESTION_FACTURA, 

A.NOMBRE AS ASOCIADO, 

LC.LINEA AS LINEA_CREDITO, 

F.PAGO, 

F.FACTURA, 

E.ESTADO AS ESTADO 

FROM FIDE_GESTION_FACTURA_TB F 

JOIN FIDE_ASOCIADO_TB A ON F.ID_ASOCIADO = A.ID_ASOCIADO, 

JOIN FIDE_ESTADO_TB E ON F.ID_ESTADO = E.ID_ESTADO; 

 

CREATE OR REPLACE VIEW FIDE_EXCEDENTES_V AS 

SELECT 

E.ID_ASOCIADO, 

.	NOMBRE AS ASOCIADO, 

P_NOMBRE AS PRODUCTO, 

E.EXCEDENTE, 

EST.ESTADO AS ESTADO 

FROM FIDE_EXCEDENTES_TB E 

JOIN FIDE_ASOCIADO_TB A ON E.ID_ASOCIADO = A.ID_ASOCIADO 

JOIN FIDE_ PRODUCTO_TB P ON E.ID_PRODUCTO = P.ID_ PRODUCTO 

JOIN FIDE_ ESTADO_TB EST ON E.ID_ ESTADO = EST.ID_ ESTADO; 

 

CREATE OR REPLACE VIEW FIDE_DIRECCIONES_V AS 

SELECT 

D.ID_DIRECCIONES, 

.	D.DESCRIPCION, 

DIST.NOMBRE_DISTRITO AS DISTRITO, 

CANT.NOMBRE_CANTON AS CANTON, 

PROV.NOMBRE_PROVINCIA AS PROVINCIA, 

PA.NOMBRE_PAIS AS PAIS, 

EST.ESTADO AS ESTADO 

FROM FIDE_DIRECCION_TB D 

JOIN FIDE_DISTRITO_TB DIST ON D.ID_DISTRITO = DIST.ID_DISTRITO 

JOIN FIDE_CANTON_TB CANT ON D.ID_CANTON = CANT.ID_ CANTON 

JOIN FIDE_PROVINCIA_TB PROV ON D.ID_ PROVINCIA = PROV.ID_ PROVINCIA 

JOIN FIDE_PAIS_TB PA ON PROV.ID_PAIS = PA.ID_PAIS 

JOIN FIDE_ ESTADO_TB EST ON D.ID_ ESTADO = EST.ID_ ESTADO; 

 

 

 

CREATE OR REPLACE VIEW FIDE_ESTADISTICAS_CREDITOS_V AS 

SELECT 

LC.LINEA AS LINEA_CREDITO, 

COUNT(C.ID_GESTION_CREDITO) AS TOTAL_CREDITOS, 

SUM(C.MONTO) AS MONTO_TOTAL, 

AVG(C.TASA) AS TASA_PROMEDIO, 

AVG(C.CUOTA) AS CUOTA_PROMEDIO 

FROM FIDE_GESTION_DE_CREDITO_TB C 

JOIN FIDE_LINEA_DE_CREDITO_TB LC ON C.ID_LINEA_CREDITO = LC.ID_LINEA_CREDITO 

GROUP BY LC.LINEA 

ORDER BY MONTO_TOTAL DESC; 

 

CREATE OR REPLACE VIEW FIDE_CREDITOS_DETALLADOS_V AS 

SELECT 

C.ID_GESTION_CREDITO, 

A.NOMBRE AS ASOCIADOS, 

A.CEDULA, 

LC.LINEA AS LINEA_CREDITO, 

P.PLAZO AS PLAZO_MESES, 

C.MONTO, 

C.TASA, 

C.CUOTA, 

C.TOTAL_MENSUAL, 

C.FECHA AS FECHA_SOLICITUD, 

EST.ESTADO AS ESTADO_CREDITO 

FROM FIDE_GESTION_DE_CREDITO_TB C 

JOIN FIDE_ASOCIADO_TB A ON C.ID_ASOCIADO = A.ID_ASOCIADO, 

JOIN FIDE_LINEA_DE_CREDITO_TB LC ON C.ID_LINEA_CREDITO = LC.ID_LINEA_CREDITO, 

JOIN FIDE_PLAZO_TB P ON C.ID_PLAZO = LC.ID_PLAZO 

JOIN FIDE_ESTADO_TB EST ON C.ID_ESTADO = EST.ID_ESTADO 

ORDER BY C.FECHA DESC; 

 

 
CREATE OR REPLACE VIEW FIDE_FACTURAS_PENDIENTES_V AS 

SELECT 

C.ID_GESTION_FACTURA, 

A.NOMBRE AS ASOCIADOS, 

A.CEDULA, 

F.FACTURA, 

F.PAGO AS MONTO_PAGO, 

EST.ESTADO AS ESTADO_FACTURA 

FROM FIDE_GESTION_FACTURA_TB F 

JOIN FIDE_ASOCIADO_TB A ON F.ID_ASOCIADO = A.ID_ASOCIADO, 

JOIN FIDE_ESTADO_TB EST ON F.ID_ESTADO = EST.ID_ESTADO 

WHERE EST.ESTADO NOT IN(‘PAGADO’, ‘CANCELADO’) 

ORDER BY F.FACTURA DESC; 